"use strict";(self.webpackChunkcarefree_drawboard_doc=self.webpackChunkcarefree_drawboard_doc||[]).push([[9458],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),o=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=o(e.components);return r.createElement(d.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=o(t),u=a,f=c["".concat(d,".").concat(u)]||c[u]||m[u]||s;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=u;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var o=2;o<s;o++)i[o]=t[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=t(7462),a=(t(7294),t(3905));const s={id:"middleware",title:"Middleware"},i=void 0,l={unversionedId:"reference/middleware",id:"reference/middleware",title:"Middleware",description:"A Middleware is basically an instance that will do something beforehand and postprocess the results afterwards. In carefree-drawboard \ud83c\udfa8, we need Middleware because:",source:"@site/docs/reference/middleware.md",sourceDirName:"reference",slug:"/reference/middleware",permalink:"/carefree-drawboard-doc/docs/reference/middleware",draft:!1,tags:[],version:"current",lastUpdatedAt:1685951193,formattedLastUpdatedAt:"Jun 5, 2023",frontMatter:{id:"middleware",title:"Middleware"},sidebar:"docs",previous:{title:"Terminology",permalink:"/carefree-drawboard-doc/docs/reference/terminology"},next:{title:"Brainstorm",permalink:"/carefree-drawboard-doc/docs/reference/brainstorm"}},d={},o=[{value:"Built-in Middlewares",id:"built-in-middlewares",level:2},{value:"<code>ResponseMiddleware</code>",id:"responsemiddleware",level:3},{value:"<code>SendSocketMessageMiddleware</code>",id:"sendsocketmessagemiddleware",level:3},{value:"<code>TimerMiddleware</code>",id:"timermiddleware",level:3},{value:"Customize Middlewares",id:"customize-middlewares",level:2}],p={toc:o},c="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Middleware")," is basically an instance that will do something beforehand and postprocess the results afterwards. In ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8, we need ",(0,a.kt)("inlineCode",{parentName:"p"},"Middleware")," because:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We want to define a powerful interface (i.e., ",(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/ISocketMessage"},(0,a.kt)("inlineCode",{parentName:"a"},"ISocketMessage")),") that can handle most of the applications."),(0,a.kt)("li",{parentName:"ul"},"We want to make it convenient to use the framework and let users to do as less things as possible.")),(0,a.kt)("p",null,"And ",(0,a.kt)("inlineCode",{parentName:"p"},"Middleware")," is designed to be the bridge between these two targets. Here's the interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/schema/plugins.py"',title:'"cfdraw/schema/plugins.py"'},'class Subscription(str, Enum):\n    ALL = "__all__"\n\n\nclass IMiddleware(ABC):\n    hash: str\n    plugin: IPlugin\n\n    # abstract\n\n    @property\n    @abstractmethod\n    def subscriptions(self) -> Union[List[PluginType], Subscription]:\n        pass\n\n    @abstractmethod\n    async def process(self, response: Any) -> ISocketMessage:\n        """\n        If `can_handle_message` is `False`, the `response` here could be anything except\n        `ISocketMessage`, because in this case if `response` is already an `ISocketMessage`,\n        it will be returned directly in the `__call__` method.\n        """\n\n    # optional callbacks\n\n    @property\n    def can_handle_message(self) -> bool:\n        return False\n\n    async def before(self, request: ISocketRequest) -> None:\n        self.hash = request.hash\n\n    # api\n\n    def __init__(self, plugin: IPlugin) -> None:\n        self.plugin = plugin\n\n    async def __call__(self, response: Any) -> ISocketMessage:\n        if (\n            self.subscriptions != Subscription.ALL\n            and self.plugin.type not in self.subscriptions\n        ):\n            return response\n        if isinstance(response, ISocketMessage) and not self.can_handle_message:\n            return response\n        return await self.process(response)\n')),(0,a.kt)("p",null,"And here's an example of how we use it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"async def __call__(self, data):\n    middlewares = [...]\n    for middleware in middlewares:\n        await middleware.before(data)\n    response = ...\n    for middleware in middlewares:\n        await response = middleware(response)\n    return response\n")),(0,a.kt)("h2",{id:"built-in-middlewares"},"Built-in Middlewares"),(0,a.kt)("h3",{id:"responsemiddleware"},(0,a.kt)("inlineCode",{parentName:"h3"},"ResponseMiddleware")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Source codes: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/carefree0910/carefree-drawboard/blob/dev/cfdraw/plugins/middlewares/response.py"},"cfdraw/plugins/middlewares/response.py"))),(0,a.kt)("p",null,"This middleware is used to convert the raw response from the plugins to an ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/ISocketMessage"},(0,a.kt)("inlineCode",{parentName:"a"},"ISocketMessage"))," instance."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Currently, it handles ",(0,a.kt)("inlineCode",{parentName:"p"},"str"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PIL.Image"),", or list of them.")),(0,a.kt)("h3",{id:"sendsocketmessagemiddleware"},(0,a.kt)("inlineCode",{parentName:"h3"},"SendSocketMessageMiddleware")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Source codes: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/carefree0910/carefree-drawboard/blob/dev/cfdraw/plugins/middlewares/send_message.py"},"cfdraw/plugins/middlewares/send_message.py"))),(0,a.kt)("p",null,"After the ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/ISocketMessage"},(0,a.kt)("inlineCode",{parentName:"a"},"ISocketMessage")),", we need to send it to the frontend. In order to avoid manually sending it here and there, we use this middleware to send it automatically."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This middleware also injects some special attributes to the response data:"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/middlewares/send_message.py"',title:'"cfdraw/plugins/middlewares/send_message.py"'},'class SendSocketMessageMiddleware(IMiddleware):\n    @property\n    def subscriptions(self) -> Union[List[PluginType], Subscription]:\n        return Subscription.ALL\n\n    @property\n    def can_handle_message(self) -> bool:\n        return True\n\n    async def process(self, response: ISocketMessage) -> ISocketMessage:\n        # highlight-start\n        if self.plugin.extra_responses:\n            if response.data.final is None:\n                response.data.final = {}\n            response.data.final["extra"] = self.plugin.extra_responses\n            response.data.injections = self.plugin.injections\n        # highlight-end\n        await self.plugin.send_message(response)\n        return response\n'))),(0,a.kt)("h3",{id:"timermiddleware"},(0,a.kt)("inlineCode",{parentName:"h3"},"TimerMiddleware")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Source codes: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/carefree0910/carefree-drawboard/blob/dev/cfdraw/plugins/middlewares/timer.py"},"cfdraw/plugins/middlewares/timer.py"))),(0,a.kt)("p",null,"This middleware only serves ",(0,a.kt)("a",{parentName:"p",href:"/docs/plugins/IFieldsPlugin"},(0,a.kt)("inlineCode",{parentName:"a"},"IFieldsPlugin")),", and it is relatively simple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/middlewares/timer.py"',title:'"cfdraw/plugins/middlewares/timer.py"'},"class TimerMiddleware(IMiddleware):\n    @property\n    def can_handle_message(self) -> bool:\n        return True\n\n    @property\n    def subscriptions(self) -> List[PluginType]:\n        return [PluginType.FIELDS]\n\n    async def process(self, response: ISocketMessage) -> ISocketMessage:\n        # highlight-start\n        self.plugin.elapsed_times.end()\n        response.data.elapsedTimes = self.plugin.elapsed_times\n        # highlight-end\n        return response\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Check ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/ISocketMessage#elapsedtimes"},"ElapsedTimes")," for the API reference.")),(0,a.kt)("h2",{id:"customize-middlewares"},"Customize Middlewares"),(0,a.kt)("p",null,"To define your own middleware, you can:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Go to ",(0,a.kt)("inlineCode",{parentName:"li"},"cfdraw/plugins/middlewares"),", create a file, and implement it."),(0,a.kt)("li",{parentName:"ol"},"Go to ",(0,a.kt)("inlineCode",{parentName:"li"},"cfdraw/plugins/base.py"),", create a new class which inherits from the ",(0,a.kt)("inlineCode",{parentName:"li"},"ISocketPlugin")," class."),(0,a.kt)("li",{parentName:"ol"},"Re-implement the ",(0,a.kt)("inlineCode",{parentName:"li"},"middlewares")," property of the new class, make sure include your new middleware in the list.")))}m.isMDXComponent=!0}}]);