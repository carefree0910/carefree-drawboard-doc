"use strict";(self.webpackChunkcarefree_drawboard_doc=self.webpackChunkcarefree_drawboard_doc||[]).push([[1440],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=o,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||a;return n?r.createElement(h,i(i({ref:t},s),{},{components:n})):r.createElement(h,i({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={id:"hosting",title:"Hosting"},i=void 0,l={unversionedId:"user-guides/hosting",id:"user-guides/hosting",title:"Hosting",description:"tl;dr",source:"@site/docs/user-guides/hosting.md",sourceDirName:"user-guides",slug:"/user-guides/hosting",permalink:"/carefree-drawboard-doc/docs/user-guides/hosting",draft:!1,tags:[],version:"current",lastUpdatedAt:1685946636,formattedLastUpdatedAt:"Jun 5, 2023",frontMatter:{id:"hosting",title:"Hosting"},sidebar:"docs",previous:{title:"Configurations",permalink:"/carefree-drawboard-doc/docs/user-guides/configurations"},next:{title:"Production",permalink:"/carefree-drawboard-doc/docs/user-guides/production"}},d={},p=[{value:"tl;dr",id:"tldr",level:2},{value:"Stages",id:"stages",level:2},{value:"Development",id:"development",level:3},{value:"Preview",id:"preview",level:3},{value:"Production",id:"production",level:3},{value:"<code>--prod</code>",id:"--prod",level:4},{value:"<code>--unified</code>",id:"--unified",level:4},{value:"Reference",id:"reference",level:2}],s={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"tldr"},"tl;dr"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cfdraw run --unified\n")),(0,o.kt)("p",null,"And you can visit ",(0,o.kt)("inlineCode",{parentName:"p"},"https://your-url.com"),", which you binded to the backend server, to see your app."),(0,o.kt)("h2",{id:"stages"},"Stages"),(0,o.kt)("p",null,"In order to fully explain the hosting mechanism, we need to break down our development 'Stages'. In ",(0,o.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8, there are typically three stages, which will be explained in the following sections."),(0,o.kt)("h3",{id:"development"},"Development"),(0,o.kt)("p",null,"In this stage, you are developing your app locally, and you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"cfdraw run")," to start the app. The default frontend port is ",(0,o.kt)("inlineCode",{parentName:"p"},"5123")," and the default backend port is ",(0,o.kt)("inlineCode",{parentName:"p"},"8123"),". So after ",(0,o.kt)("inlineCode",{parentName:"p"},"\ud83c\udf89 Backend Server is Ready!")," is printed, you can:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Visit your app (with hot reload) at ",(0,o.kt)("inlineCode",{parentName:"li"},"http://localhost:5123"),"."),(0,o.kt)("li",{parentName:"ol"},"Visit the API documentation at ",(0,o.kt)("inlineCode",{parentName:"li"},"http://localhost:8123/redoc"),".")),(0,o.kt)("p",null,"This is the most comfortable stage to get start with. No extra requirements, just ",(0,o.kt)("inlineCode",{parentName:"p"},"cfdraw run")," and everything is ready!"),(0,o.kt)("h3",{id:"preview"},"Preview"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"This stage can be safely skipped if you are not dealing with large projects.")),(0,o.kt)("p",null,"When you finished developing and want to publish it, it will be safer if you check the production build first. Since you as a developer can be hard to recognize some tricky bugs, you may want to share it with your friends / collaborators in a LAN environment. In this case, you'll need to find out your ip address and assign it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CFDRAW_API_URL")," env variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export CFDRAW_API_URL=http://your-ip-address:8123\ncfdraw run --prod\n")),(0,o.kt)("p",null,"By setting ",(0,o.kt)("inlineCode",{parentName:"p"},"CFDRAW_API_URL"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 will know it should send requests to this specific (",(0,o.kt)("strong",{parentName:"p"},"backend"),") url instead of local host, which makes LAN hosting possible. After some time, the console will printed out a bunch of (",(0,o.kt)("strong",{parentName:"p"},"frontend"),") urls. Try them out and there should be one of them that can work in your LAN environment."),(0,o.kt)("h3",{id:"production"},"Production"),(0,o.kt)("p",null,"Now everything is ready and you want to expose your app to the public. There are two ways to do it."),(0,o.kt)("h4",{id:"--prod"},(0,o.kt)("inlineCode",{parentName:"h4"},"--prod")),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"--prod")," for hosting, the behaviour will be exactly the same as the ",(0,o.kt)("a",{parentName:"p",href:"#preview"},"Preview")," stage, and the performance should be great."),(0,o.kt)("p",null,"However, it is not very convenient, because you'll need to prepare two public URLs to finish hosting: one for the backend and one for the frontend. Here's a brief introduction of how to do it (suppose using the default ports):"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"bind the frontend url to ",(0,o.kt)("inlineCode",{parentName:"li"},"5123")," port of your frontend server."),(0,o.kt)("li",{parentName:"ol"},"bind the backend url to ",(0,o.kt)("inlineCode",{parentName:"li"},"8123")," port of your backend server."),(0,o.kt)("li",{parentName:"ol"},"launch your server with the following commands:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export CFDRAW_API_URL=https://your-backend-url\ncfdraw run --prod\n")),(0,o.kt)("p",null,"Again, after a bunch of urls are printed, you will be able to visit your app publicly at the configured ",(0,o.kt)("inlineCode",{parentName:"p"},"https://your-frontend-url"),"."),(0,o.kt)("h4",{id:"--unified"},(0,o.kt)("inlineCode",{parentName:"h4"},"--unified")),(0,o.kt)("p",null,"In order to make hosting more convenient, ",(0,o.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 also introduced ",(0,o.kt)("inlineCode",{parentName:"p"},"AssetsEndpoint"),", which can send the frontend assets to the web browser with the ",(0,o.kt)("inlineCode",{parentName:"p"},"FastAPI")," backend server. By doing so, we can now prepare only one public URL and bind it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"FastAPI")," server and everything will be OK:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"bind your url (e.g., ",(0,o.kt)("inlineCode",{parentName:"li"},"https://your-url.com"),") to ",(0,o.kt)("inlineCode",{parentName:"li"},"8123")," (the default backend port) port of your server."),(0,o.kt)("li",{parentName:"ol"},"launch your server with the following commands:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cfdraw run --unified\n")),(0,o.kt)("p",null,"And you can visit ",(0,o.kt)("inlineCode",{parentName:"p"},"https://your-url.com")," to see your app."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"We don't need to specify ",(0,o.kt)("inlineCode",{parentName:"li"},"CFDRAW_API_URL")," here because ",(0,o.kt)("inlineCode",{parentName:"li"},"carefree-drawboard")," \ud83c\udfa8 will use the current url as the backend url by default."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Beware that there are drawbacks"),": in a production environment, it's generally recommended to serve static assets using a dedicated web server like Nginx or a Content Delivery Network (CDN) for better performance and scalability. That's why we still provide the ",(0,o.kt)("inlineCode",{parentName:"li"},"--prod")," mode, which separate frontend and backend completely.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"However, the ",(0,o.kt)("inlineCode",{parentName:"li"},"--unified")," mode is still a good choice for small projects or quick demos, so you can choose the mode that suits you best."))))),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Apart from setting ",(0,o.kt)("inlineCode",{parentName:"li"},"CFDRAW_API_URL"),", you can also set the api url with the ",(0,o.kt)("a",{parentName:"li",href:"/docs/api-reference/Config"},(0,o.kt)("inlineCode",{parentName:"a"},"Config"))," object located at the ",(0,o.kt)("inlineCode",{parentName:"li"},"cfconfig.py")," file:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfconfig.py"',title:'"cfconfig.py"'},'from cfdraw.config import Config\n\nconfig = Config(\n    backend_hosting_url="https://your-backend-url.com",\n)\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"https://colab.research.google.com/github/carefree0910/carefree-drawboard/blob/dev/examples/server.ipynb"},"Google Colab")," example demonstrates all the concepts mentioned in this page. It utilizes ",(0,o.kt)("inlineCode",{parentName:"li"},"ngrok")," to get public URLs. Here are the core codes:")),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="development stage"',title:'"development','stage"':!0},'import os\nfrom pyngrok import ngrok\n\nfe_url = ngrok.connect(5123, bind_tls=True).public_url\nbe_url = ngrok.connect(8123, bind_tls=True).public_url\nprint(f"You app will be running at: {fe_url}")\nos.environ["CFDRAW_API_URL"] = be_url\nos.system("cfdraw run")\n')),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="--prod mode"',title:'"--prod','mode"':!0},'import os\nfrom pyngrok import ngrok\n\nfe_url = ngrok.connect(5123, bind_tls=True).public_url\nbe_url = ngrok.connect(8123, bind_tls=True).public_url\nprint(f"You app will be running at: {fe_url}")\nos.environ["CFDRAW_API_URL"] = be_url\nos.system("cfdraw run --prod")\n')),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="--unified mode"',title:'"--unified','mode"':!0},'import os\nfrom pyngrok import ngrok\n\nurl = ngrok.connect(8123, bind_tls=True).public_url\nprint(f"You app will be running at: {url}")\nos.system("cfdraw run --unified")\n')))}c.isMDXComponent=!0}}]);