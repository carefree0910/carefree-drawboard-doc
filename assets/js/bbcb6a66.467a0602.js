"use strict";(self.webpackChunkcarefree_drawboard_doc=self.webpackChunkcarefree_drawboard_doc||[]).push([[5364],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6873:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294);function r(e){let{type:t,defaultValue:n,required:r,appendix:i}=e;const o=a.createElement(a.Fragment,null,i&&a.createElement(a.Fragment,null," ","- ",a.createElement("code",null,i)));return a.createElement("p",null,"[ ",a.createElement("strong",null,t),r?a.createElement(a.Fragment,null,a.createElement("em",null,", required"),o):n?a.createElement(a.Fragment,null,a.createElement("em",null,", default"),": ",a.createElement("code",null,n),o):""," ","]")}},8351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var a=n(7462),r=n(7294),i=n(3905),o=n(6873);const l={id:"ISocketMessage",title:"ISocketMessage"},s=void 0,d={unversionedId:"api-reference/ISocketMessage",id:"api-reference/ISocketMessage",title:"ISocketMessage",description:"hash",source:"@site/docs/api-reference/ISocketMessage.md",sourceDirName:"api-reference",slug:"/api-reference/ISocketMessage",permalink:"/carefree-drawboard-doc/docs/api-reference/ISocketMessage",draft:!1,tags:[],version:"current",lastUpdatedAt:1687226683,formattedLastUpdatedAt:"Jun 20, 2023",frontMatter:{id:"ISocketMessage",title:"ISocketMessage"},sidebar:"docs",previous:{title:"ISocketRequest",permalink:"/carefree-drawboard-doc/docs/api-reference/ISocketRequest"},next:{title:"Design Philosophy",permalink:"/carefree-drawboard-doc/docs/reference/design-philosophy"}},c={},p=[{value:"<code>hash</code>",id:"hash",level:3},{value:"<code>status</code>",id:"status",level:3},{value:"<code>total</code>",id:"total",level:3},{value:"<code>pending</code>",id:"pending",level:3},{value:"<code>message</code>",id:"message",level:3},{value:"<code>data</code>",id:"data",level:3},{value:"Reference",id:"reference",level:2},{value:"<code>SocketStatus</code>",id:"socketstatus",level:3},{value:"<code>ISocketResponse</code>",id:"isocketresponse",level:3},{value:"<code>progress</code>",id:"progress",level:4},{value:"<code>intermediate</code>",id:"intermediate",level:4},{value:"<code>final</code>",id:"final",level:4},{value:"<code>injections</code>",id:"injections",level:4},{value:"<code>elapsedTimes</code>",id:"elapsedtimes",level:4},{value:"<code>ISocketIntermediate</code>",id:"isocketintermediate",level:3},{value:"<code>imageList</code>",id:"imagelist",level:4},{value:"<code>textList</code>",id:"textlist",level:4},{value:"<code>ElapsedTimes</code>",id:"elapsedtimes-1",level:3}],u={toc:p},m="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"hash"},(0,i.kt)("inlineCode",{parentName:"h3"},"hash")),(0,i.kt)(o.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The hash of the current task."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This is used internally and should not be used elsewhere.")),(0,i.kt)("h3",{id:"status"},(0,i.kt)("inlineCode",{parentName:"h3"},"status")),(0,i.kt)(o.Z,{type:(0,i.kt)("a",{href:"#socketstatus"},"SocketStatus"),required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"Status of the current task."),(0,i.kt)("h3",{id:"total"},(0,i.kt)("inlineCode",{parentName:"h3"},"total")),(0,i.kt)(o.Z,{type:"int",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"Total number of tasks."),(0,i.kt)("h3",{id:"pending"},(0,i.kt)("inlineCode",{parentName:"h3"},"pending")),(0,i.kt)(o.Z,{type:"int",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"Number of pending tasks."),(0,i.kt)("h3",{id:"message"},(0,i.kt)("inlineCode",{parentName:"h3"},"message")),(0,i.kt)(o.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"Message of the current status."),(0,i.kt)("h3",{id:"data"},(0,i.kt)("inlineCode",{parentName:"h3"},"data")),(0,i.kt)(o.Z,{type:(0,i.kt)("a",{href:"#isocketresponse"},"ISocketResponse"),required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"Response data."),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("h3",{id:"socketstatus"},(0,i.kt)("inlineCode",{parentName:"h3"},"SocketStatus")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/schema/plugins.py"',title:'"cfdraw/schema/plugins.py"'},'class SocketStatus(str, Enum):\n    PENDING = "pending"\n    WORKING = "working"\n    FINISHED = "finished"\n    EXCEPTION = "exception"\n    INTERRUPTED = "interrupted"\n')),(0,i.kt)("h3",{id:"isocketresponse"},(0,i.kt)("inlineCode",{parentName:"h3"},"ISocketResponse")),(0,i.kt)("h4",{id:"progress"},(0,i.kt)("inlineCode",{parentName:"h4"},"progress")),(0,i.kt)(o.Z,{type:"float | None",defaultValue:"None",appendix:"\u22650, \u22641",mdxType:"Badget"}),(0,i.kt)("p",null,"Progress of current task, if any."),(0,i.kt)("h4",{id:"intermediate"},(0,i.kt)("inlineCode",{parentName:"h4"},"intermediate")),(0,i.kt)(o.Z,{type:(0,i.kt)(r.Fragment,null,(0,i.kt)("a",{href:"#isocketintermediate"},"ISocketIntermediate")," | None"),defaultValue:"None",mdxType:"Badget"}),(0,i.kt)("p",null,"Intermediate responses, if any."),(0,i.kt)("h4",{id:"final"},(0,i.kt)("inlineCode",{parentName:"h4"},"final")),(0,i.kt)(o.Z,{type:"Dict[str, Any] | None",defaultValue:"None",mdxType:"Badget"}),(0,i.kt)("p",null,"Final response, if any."),(0,i.kt)("p",null,"Although not typed here, ",(0,i.kt)("inlineCode",{parentName:"p"},"final")," actually needs to follow the following schema in most cases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="cfdraw/.web/src/schema/meta.ts"',title:'"cfdraw/.web/src/schema/meta.ts"'},'export type IPythonResults = (\n  | { type: "text"; value: { text: string; safe: boolean; reason: string }[] }\n  | { type: "image"; value: { w: number; h: number; url: string; safe: boolean; reason: string }[] }\n) & { extra?: Dictionary<any> };\n')),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Luckily, we've already provided the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/middleware#responsemiddleware"},"ResponseMiddleware")," to handle the conversion from raw results to the above schema, so normally you don't need to worry about it.")),(0,i.kt)("h4",{id:"injections"},(0,i.kt)("inlineCode",{parentName:"h4"},"injections")),(0,i.kt)(o.Z,{type:"Dict[str, Any] | None",defaultValue:"None",mdxType:"Badget"}),(0,i.kt)("p",null,"Injections, if any."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/terminology#injections"},"Injections")," for what an 'injection' is.")),(0,i.kt)("h4",{id:"elapsedtimes"},(0,i.kt)("inlineCode",{parentName:"h4"},"elapsedTimes")),(0,i.kt)(o.Z,{type:(0,i.kt)(r.Fragment,null,(0,i.kt)("a",{href:"#elapsedtimes-1"},"ElapsedTimes")," | None"),defaultValue:"None",mdxType:"Badget"}),(0,i.kt)("p",null,"Elapsed times."),(0,i.kt)("h3",{id:"isocketintermediate"},(0,i.kt)("inlineCode",{parentName:"h3"},"ISocketIntermediate")),(0,i.kt)("h4",{id:"imagelist"},(0,i.kt)("inlineCode",{parentName:"h4"},"imageList")),(0,i.kt)(o.Z,{type:"List[str] | None",defaultValue:"None",mdxType:"Badget"}),(0,i.kt)("p",null,"Intermediate images, if any."),(0,i.kt)("h4",{id:"textlist"},(0,i.kt)("inlineCode",{parentName:"h4"},"textList")),(0,i.kt)(o.Z,{type:"List[str] | None",defaultValue:"None",mdxType:"Badget"}),(0,i.kt)("p",null,"Intermediate texts, if any."),(0,i.kt)("h3",{id:"elapsedtimes-1"},(0,i.kt)("inlineCode",{parentName:"h3"},"ElapsedTimes")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/schema/plugins.py"',title:'"cfdraw/schema/plugins.py"'},"class ElapsedTimes(BaseModel):\n    createTime: Optional[float]\n    startTime: Optional[float]\n    endTime: Optional[float]\n    pending: Optional[float]\n    executing: Optional[float]\n    upload: Optional[float]\n    total: Optional[float]\n\n    def __init__(self, **data: Any):\n        super().__init__(**data)\n        self.createTime = time.time()\n\n    def start(self) -> None:\n        start = time.time()\n        self.startTime = start\n        if self.createTime is not None:\n            self.pending = start - self.createTime\n\n    def end(self) -> None:\n        end = time.time()\n        self.endTime = end\n        if self.startTime is not None:\n            self.executing = end - self.startTime\n            if self.upload is not None:\n                self.executing -= self.upload\n        if self.createTime is not None:\n            self.total = end - self.createTime\n")))}f.isMDXComponent=!0}}]);