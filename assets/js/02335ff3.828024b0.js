"use strict";(self.webpackChunkcarefree_drawboard_doc=self.webpackChunkcarefree_drawboard_doc||[]).push([[530],{7375:(e,t,n)=>{n.d(t,{Z:()=>l});var i=n(7294),a=n(2004);function l(e){let{url:t}=e;return i.createElement(i.Fragment,null,i.createElement("div",{align:"center"},i.createElement(a.Z,{playing:!0,controls:!0,url:t})),i.createElement("br",null))}},2332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var i=n(7462),a=(n(7294),n(3905)),l=n(7375);const r={id:"index",title:"Overview"},o=void 0,p={unversionedId:"plugins/index",id:"plugins/index",title:"Overview",description:"* Built-in Methods",source:"@site/docs/plugins/index.md",sourceDirName:"plugins",slug:"/plugins/",permalink:"/carefree-drawboard-doc/docs/plugins/",draft:!1,tags:[],version:"current",lastUpdatedAt:1686045254,formattedLastUpdatedAt:"Jun 6, 2023",frontMatter:{id:"index",title:"Overview"},sidebar:"docs",previous:{title:"Project Structure",permalink:"/carefree-drawboard-doc/docs/getting-started/project-structure"},next:{title:"IFieldsPlugin",permalink:"/carefree-drawboard-doc/docs/plugins/IFieldsPlugin"}},s={},d=[{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Styles",id:"styles",level:2},{value:"<code>IPluginSettings</code>",id:"ipluginsettings",level:3},{value:"Example",id:"example",level:4},{value:"<code>IPluginInfo</code>",id:"iplugininfo",level:3},{value:"Example",id:"example-1",level:4},{value:"Logics",id:"logics",level:2},{value:"Accessibility",id:"accessibility",level:3},{value:"Register Mechanism",id:"register-mechanism",level:2},{value:"Reference",id:"reference",level:2},{value:"Built-in Bindings",id:"built-in-bindings",level:3},{value:"Plugin Positioning",id:"plugin-positioning",level:3}],u={toc:d},g="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"API reference",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/Built-in-Methods"},"Built-in Methods")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginSettings"},"IPluginSettings")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginInfo"},"IPluginInfo")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/ISocketRequest"},"ISocketRequest")))),(0,a.kt)("p",null,"As mentioned in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/design-philosophy"},"Design Philosophy"),", everything in ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 is a ",(0,a.kt)("strong",{parentName:"p"},"plugin"),", so it will be important to understand how plugins are built / work. In this page, we will cover the ",(0,a.kt)("strong",{parentName:"p"},"common")," parts that every plugin will share, and leave those specific parts to separate pages."),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("strong",null,"How to -")),(0,a.kt)("h3",null," Find / Use Plugins? "),(0,a.kt)("p",null,"In the future, we will implement a built-in marketplace for plugins, so that you can publish / search / download / use them easily. For now, you may need to build your own plugins from scratch. \ud83d\ude23"),(0,a.kt)("p",null,"However, since plugins can be built within one single file, for now you can share your plugins by simply sharing the source code of the plugin file. \ud83d\ude06"),(0,a.kt)("p",null,"And, as we introduced in the ",(0,a.kt)("a",{parentName:"p",href:"/docs/getting-started"},"Getting Started"),", we have a ",(0,a.kt)("a",{parentName:"p",href:"#register-mechanism"},"Register Mechanism")," for the plugins, so you can include others' plugins without worrying too much - unless you import & register them, no side effects will be caused."),(0,a.kt)("h3",null," Publish Plugins? "),(0,a.kt)("p",null,"As mentioned above, we will implement a built-in marketplace for plugins in the future, so publishing plugins will be very easy. But for now, you may need to share your plugins by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Simply sharing the source code of the plugin file."),(0,a.kt)("li",{parentName:"ul"},"Follow the ",(0,a.kt)("a",{parentName:"li",href:"/docs/contributing-guides/contributing"},"Contributing")," guide and submit a PR.")),(0,a.kt)("h3",null," Build Plugins? "),(0,a.kt)("p",null,"That's what this page is mainly about. \ud83d\ude0e Stay tuned!")),(0,a.kt)("h2",{id:"basic-concepts"},"Basic Concepts"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Plugin")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 usually consists of two parts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"plugin button"),", which is used to trigger the expansion of the ",(0,a.kt)("inlineCode",{parentName:"li"},"expand panel"),"."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"expand panel"),", which is used for users to interact with the plugin.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"For some special plugins (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"Delete"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Download"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Undo"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Redo"),", etc.), the '",(0,a.kt)("inlineCode",{parentName:"p"},"expand panel"),"' will be omitted because user interaction ends with the click of the ",(0,a.kt)("inlineCode",{parentName:"p"},"plugin button"),".")),(0,a.kt)("p",null,"So a typical workflow of a plugin will be:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Users click the ",(0,a.kt)("inlineCode",{parentName:"li"},"plugin button"),"."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"expand panel")," is expanded."),(0,a.kt)("li",{parentName:"ol"},"Users interact with the ",(0,a.kt)("inlineCode",{parentName:"li"},"expand panel"),", e.g., fill in some input fields."),(0,a.kt)("li",{parentName:"ol"},"Users click the ",(0,a.kt)("inlineCode",{parentName:"li"},"Submit")," button to send the filled inputs to the backend."),(0,a.kt)("li",{parentName:"ol"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"expand panel")," is collapsed, the ",(0,a.kt)("inlineCode",{parentName:"li"},"plugin button")," is showing some progress indicators during the processing (e.g., a progress bar), and the backend will be processing the user inputs."),(0,a.kt)("li",{parentName:"ol"},"The drawboard \ud83c\udfa8 will be updated once the processing is done.")),(0,a.kt)("p",null,"To make things easier, we extracted the common parts of the plugins into the ",(0,a.kt)("a",{parentName:"p",href:"#built-in-bindings"},"Built-in Bindings"),", so you only need to concern about:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"What should be the ",(0,a.kt)("strong",{parentName:"li"},"Styles")," of the ",(0,a.kt)("inlineCode",{parentName:"li"},"plugin button")," and the ",(0,a.kt)("inlineCode",{parentName:"li"},"expand panel"),"?"),(0,a.kt)("li",{parentName:"ol"},"What should be the ",(0,a.kt)("strong",{parentName:"li"},"Logics")," when the ",(0,a.kt)("inlineCode",{parentName:"li"},"Submit")," button is clicked and the user inputs are sent to the backend?")),(0,a.kt)("p",null,"After all things are done, you or other users can utilize the ",(0,a.kt)("a",{parentName:"p",href:"#register-mechanism"},"Register Mechanism")," to register the plugins into the drawboard \ud83c\udfa8. Before which, no side effects will be caused."),(0,a.kt)("p",null,"And in the following sections, we will cover these concepts in detail."),(0,a.kt)("h2",{id:"inheritance"},"Inheritance"),(0,a.kt)("p",null,"To utilize the common parts of the plugins, you need to inherit from one of the ",(0,a.kt)("a",{parentName:"p",href:"#built-in-bindings"},"Built-in Bindings")," (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"IFieldsPlugin"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\n# highlight-next-line\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(...)\n\n    async def process(self, data: ISocketRequest):\n        ...\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"The first import line"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n")),(0,a.kt)("p",{parentName:"admonition"},"is a typical import line for every ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 app. It will import all the necessary stuffs for you to build your plugins.")),(0,a.kt)("h2",{id:"styles"},"Styles"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8, we specify ",(0,a.kt)("strong",{parentName:"p"},"Styles")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"settings")," property."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    # highlight-start\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(...)\n    # highlight-end\n\n    async def process(self, data: ISocketRequest):\n        ...\n")),(0,a.kt)("h3",{id:"ipluginsettings"},(0,a.kt)("inlineCode",{parentName:"h3"},"IPluginSettings")),(0,a.kt)("admonition",{title:"API reference",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginSettings"},"IPluginSettings")))),(0,a.kt)("p",null,"As the highlighted lines show, we should return an instance of ",(0,a.kt)("inlineCode",{parentName:"p"},"IPluginSettings")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"settings")," property."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"We return a class instance instead of a ",(0,a.kt)("inlineCode",{parentName:"p"},"dict")," here because we want to utilize the auto-completion feature of IDEs.")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IPluginSettings")," can be used to specify:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"Styles")," of the ",(0,a.kt)("inlineCode",{parentName:"li"},"plugin button")," and the ",(0,a.kt)("inlineCode",{parentName:"li"},"expand panel"),"."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("strong",{parentName:"li"},"behaviours")," of the ",(0,a.kt)("inlineCode",{parentName:"li"},"expand panel"),", this is specified in a separate class - ",(0,a.kt)("a",{parentName:"li",href:"#iplugininfo"},(0,a.kt)("inlineCode",{parentName:"a"},"IPluginInfo")),".")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Although we can also treat '",(0,a.kt)("strong",{parentName:"p"},"behaviours"),"' as '",(0,a.kt)("strong",{parentName:"p"},"Styles"),"', we separate them for better understanding.")),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"class Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(\n            # highlight-start\n            # width of the expanded panel\n            w=300,\n            # height of the expanded panel\n            h=180,\n            # tooltip of the plugin\n            tooltip=\"Apply Gaussian Blur to the image\",\n            # specify that this plugin should only appear when an image is selected\n            nodeConstraint=NodeConstraints.IMAGE,\n            # specify that this plugin should appear at the right-top of the selected image\n            pivot=PivotType.RT,\n            # specify that this plugin should 'follow' the selected image when it is dragged / resized\n            follow=True,\n            # highlight-end\n        )\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Most properties of the ",(0,a.kt)("inlineCode",{parentName:"p"},"IPluginSettings")," are pretty self-explanatory, while the ",(0,a.kt)("inlineCode",{parentName:"p"},"nodeConstraint"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"pivot")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"follow")," properties are a bit tricky. See ",(0,a.kt)("a",{parentName:"p",href:"#plugin-positioning"},"Plugin Positioning")," for more details.")),(0,a.kt)("h3",{id:"iplugininfo"},(0,a.kt)("inlineCode",{parentName:"h3"},"IPluginInfo")),(0,a.kt)("admonition",{title:"API reference",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginInfo"},"IPluginInfo")))),(0,a.kt)("p",null,"This is where you specify the ",(0,a.kt)("strong",{parentName:"p"},"behaviours")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"expand panel"),". In reality, we should use one of the ",(0,a.kt)("a",{parentName:"p",href:"#built-in-bindings"},"Built-in Bindings")," (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"IFieldsPluginInfo"),") instead of using the ",(0,a.kt)("inlineCode",{parentName:"p"},"IPluginInfo")," directly."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"We introduce ",(0,a.kt)("a",{parentName:"p",href:"#built-in-bindings"},"Built-in Bindings")," because every plugin has some common behaviours & some specific behaviours, so we extract the common behaviours into the ",(0,a.kt)("inlineCode",{parentName:"p"},"IPluginInfo"),", while leave the specific behaviours to the ",(0,a.kt)("a",{parentName:"p",href:"#built-in-bindings"},"Built-in Bindings"),".")),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"class Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(\n            ...,\n            # highlight-start\n            pluginInfo=IFieldsPluginInfo(\n                ...,\n                # specify that the plugin should stay expanded even after the users click the 'Submit' button\n                closeOnSubmit=False,\n                # specify that the plugin should show a toast message after the users click the 'Submit' button\n                toastOnSubmit=True,\n                # specify the toast message to be shown after the users click the 'Submit' button\n                toastMessageOnSubmit=\"Gaussian Blur applied!\",\n            ),\n            # highlight-end\n        )\n")),(0,a.kt)("h2",{id:"logics"},"Logics"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8, we specify logics in the ",(0,a.kt)("inlineCode",{parentName:"p"},"process")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(...)\n\n    # highlight-start\n    async def process(self, data: ISocketRequest):\n        ...\n    # highlight-end\n")),(0,a.kt)("p",null,"As you can see, the only argument of the ",(0,a.kt)("inlineCode",{parentName:"p"},"process")," method is ",(0,a.kt)("inlineCode",{parentName:"p"},"data"),", which is an instance of ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/ISocketRequest"},(0,a.kt)("inlineCode",{parentName:"a"},"ISocketRequest")),". Generally speaking, it contains the following information:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"User data (e.g., ",(0,a.kt)("inlineCode",{parentName:"li"},"userId"),")."),(0,a.kt)("li",{parentName:"ul"},"Data of the user inputs."),(0,a.kt)("li",{parentName:"ul"},"Data of the selecting ",(0,a.kt)("inlineCode",{parentName:"li"},"Node"),"(s) on the drawboard \ud83c\udfa8.")),(0,a.kt)("p",null,"So it is enough for most if not every scenario!"),(0,a.kt)("h3",{id:"accessibility"},"Accessibility"),(0,a.kt)("admonition",{title:"API reference",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/Built-in-Methods"},"Built-in Methods")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/ISocketRequest"},"ISocketRequest"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/ISocketRequest#inodedata"},"INodeData")))))),(0,a.kt)("p",null,"However, providing all necessary data is not the end of the story, we also need to make sure that we can utilize the data in a convenient way. For example, for any plugin that requires processing an image, we should be able to get a ",(0,a.kt)("inlineCode",{parentName:"p"},"PIL.Image")," instance as easy as possible."),(0,a.kt)("p",null,"Therefore, ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 provides a set of ",(0,a.kt)("a",{parentName:"p",href:"/docs/api-reference/Built-in-Methods"},"Built-in Methods")," to help you out. A typical example is the ",(0,a.kt)("inlineCode",{parentName:"p"},"load_image")," method, which can help you download an image from a url in an ",(0,a.kt)("inlineCode",{parentName:"p"},"async")," way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(...)\n\n    async def process(self, data: ISocketRequest):\n        # highlight-start\n        url = data.nodeData.src\n        image = await self.load_image(url)  # type: PIL.Image\n        # highlight-end\n        ...\n")),(0,a.kt)("h2",{id:"register-mechanism"},"Register Mechanism"),(0,a.kt)("admonition",{title:"API reference",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/Global-Functions#register_plugin"},"register_plugin")))),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8, every plugin needs to be registered to actually work. Let's say you defined a plugin in the ",(0,a.kt)("inlineCode",{parentName:"p"},"my_plugin.py")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="my_plugin.py"',title:'"my_plugin.py"'},"from cfdraw import *\n\nclass MyPlugin(IFieldsPlugin):\n    ...\n")),(0,a.kt)("p",null,"Then in your main app file (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"app.py"),"), you can register it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},'from cfdraw import *\n# highlight-next-line\nfrom my_plugin import MyPlugin\n\n# highlight-next-line\nregister_plugin("my_plugin")(MyPlugin)\napp = App()\n')),(0,a.kt)("p",null,"If there's another plugin called ",(0,a.kt)("inlineCode",{parentName:"p"},"MyPlugin")," as well in another file (e.g., ",(0,a.kt)("inlineCode",{parentName:"p"},"my_plugin2.py"),"), and you want to register it as well, you can:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},'from cfdraw import *\n# highlight-next-line\nfrom my_plugin import MyPlugin as MyPlugin1\n# highlight-next-line\nfrom my_plugin2 import MyPlugin as MyPlugin2\n\n# highlight-start\n# Notice that you need to keep the \'name\' you passed to the \n# `register_plugin` function unique across all registered plugins!\nregister_plugin("my_plugin1")(MyPlugin1)\nregister_plugin("my_plugin2")(MyPlugin2)\n# highlight-end\napp = App()\n')),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 introduced this register mechanism because it can make the whole system:"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"More ",(0,a.kt)("strong",{parentName:"li"},"decoupled"),". You can now define plugins freely without worrying about any side effects."),(0,a.kt)("li",{parentName:"ul"},"More ",(0,a.kt)("strong",{parentName:"li"},"extensible"),". If you want to use plugins implemented by others, you can simply import & register them."))),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("h3",{id:"built-in-bindings"},"Built-in Bindings"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8, a Built-in Binding often refers to two things:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A class for your plugin to inherit from."),(0,a.kt)("li",{parentName:"ul"},"A class which inherits from ",(0,a.kt)("inlineCode",{parentName:"li"},"IPluginInfo")," for you to specify the ",(0,a.kt)("inlineCode",{parentName:"li"},"pluginInfo")," property of ",(0,a.kt)("inlineCode",{parentName:"li"},"IPluginSettings"),".")),(0,a.kt)("p",null,"For example, the most commonly used Built-in Binding is ",(0,a.kt)("inlineCode",{parentName:"p"},"IFieldsPlugin"),", and you should use it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\n# highlight-next-line\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(\n            ...,\n            # highlight-next-line\n            pluginInfo=IFieldsPluginInfo(...),\n        )\n\n    async def process(self, data: ISocketRequest):\n        ...\n")),(0,a.kt)("p",null,"And here's a table of all the supported Built-in Bindings:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"center"},(0,a.kt)("div",{style:{width:"200px"}},"Plugin Base Class")),(0,a.kt)("th",{parentName:"tr",align:"center"},(0,a.kt)("div",{style:{width:"200px"}},(0,a.kt)("inlineCode",{parentName:"th"},"IFieldsInfo")," inheritor")))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("a",{parentName:"td",href:"/docs/plugins/IFieldsPlugin"},(0,a.kt)("inlineCode",{parentName:"a"},"IFieldsPlugin"))),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/IPluginInfo#ifieldsplugininfo"},(0,a.kt)("inlineCode",{parentName:"a"},"IFieldsPluginInfo")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("a",{parentName:"td",href:"/docs/plugins/IChatPlugin"},(0,a.kt)("inlineCode",{parentName:"a"},"IChatPlugin"))),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/IPluginInfo#ichatplugininfo"},(0,a.kt)("inlineCode",{parentName:"a"},"IChatPluginInfo")))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("a",{parentName:"td",href:"/docs/plugins/IPluginGroup"},(0,a.kt)("inlineCode",{parentName:"a"},"IPluginGroup"))),(0,a.kt)("td",{parentName:"tr",align:"center"},(0,a.kt)("a",{parentName:"td",href:"/docs/api-reference/IPluginInfo#iplugingroupinfo"},(0,a.kt)("inlineCode",{parentName:"a"},"IPluginGroupInfo")))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"You may ask: why do we need a ",(0,a.kt)("strong",null,"Base Class")," for the plugin?"),(0,a.kt)("p",null,"In fact, ",(0,a.kt)("strong",{parentName:"p"},"Base Class")," is no more than an ",(0,a.kt)("inlineCode",{parentName:"p"},"ISocketPlugin")," with a pre-defined ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," property. For example, here's the complete code of ",(0,a.kt)("inlineCode",{parentName:"p"},"IFieldsPlugin"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'showLineNumbers title="cfdraw/plugins/bindings.py"',showLineNumbers:!0,title:'"cfdraw/plugins/bindings.py"'},"class IFieldsPlugin(ISocketPlugin):\n    @property\n    def type(self) -> PluginType:\n        return PluginType.FIELDS\n")),(0,a.kt)("p",null,"So with a ",(0,a.kt)("strong",{parentName:"p"},"Base Class"),", you don't need to speciy the ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," property anymore. Now the question becomes: why do we need a ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," property? The answer is: we need it in case ",(0,a.kt)("a",{parentName:"p",href:"/docs/reference/middleware"},"Middleware")," wants to subscribe for only a / some specific type(s) of plugins. For example, the ",(0,a.kt)("inlineCode",{parentName:"p"},"TimerMiddleware")," will only subscribe for plugins that are inherited from ",(0,a.kt)("inlineCode",{parentName:"p"},"IFieldsPlugin"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/middlewares/timer.py"',title:'"cfdraw/plugins/middlewares/timer.py"'},"class TimerMiddleware(IMiddleware):\n    ...\n\n    # highlight-start\n    @property\n    def subscriptions(self) -> List[PluginType]:\n        return [PluginType.FIELDS]\n    # highlight-end\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/bindings.py"',title:'"cfdraw/plugins/bindings.py"'},"class IFieldsPlugin(ISocketPlugin):\n    # highlight-start\n    @property\n    def type(self) -> PluginType:\n        return PluginType.FIELDS\n    # highlight-end\n"))),(0,a.kt)("h3",{id:"plugin-positioning"},"Plugin Positioning"),(0,a.kt)("admonition",{title:"API reference",type:"info"},(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginSettings#nodeconstraint"},"nodeConstraint")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginSettings#nodeconstraintrules"},"nodeConstraintRules")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginSettings#nodeconstraintvalidator"},"nodeConstraintValidator")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginSettings#follow"},"follow")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginSettings#pivot"},"pivot")))),(0,a.kt)("p",null,"The positioning of the plugins in ",(0,a.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 is relatively simple. We only need to keep three things in mind:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Should the plugin always be displayed, or should the plugin be displayed if and only if certain ",(0,a.kt)("a",{parentName:"li",href:"/docs/reference/terminology#node"},(0,a.kt)("inlineCode",{parentName:"a"},"Node")),"(s) are selected?"),(0,a.kt)("li",{parentName:"ol"},"Should the plugin '",(0,a.kt)("strong",{parentName:"li"},"follow"),"' the selected ",(0,a.kt)("a",{parentName:"li",href:"/docs/reference/terminology#node"},(0,a.kt)("inlineCode",{parentName:"a"},"Node")),"(s), or should it stick at the edge of the drawboard \ud83c\udfa8?"),(0,a.kt)("li",{parentName:"ol"},"Which ",(0,a.kt)("a",{parentName:"li",href:"/docs/reference/terminology#pivot"},(0,a.kt)("inlineCode",{parentName:"a"},"Pivot"))," should we place our plugin?")),(0,a.kt)("p",null,"Let's show some examples below to demonstrate the ideas!"),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"dict(\n    nodeConstraint=NodeConstraints.IMAGE,\n    follow=True,\n    pivot=PivotType.RT,\n)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The plugin will be displayed if and only if the ",(0,a.kt)("inlineCode",{parentName:"li"},"ImageNode")," is selected."),(0,a.kt)("li",{parentName:"ul"},"The plugin will follow the ",(0,a.kt)("inlineCode",{parentName:"li"},"rt")," (",(0,a.kt)("strong",{parentName:"li"},"r"),"ight ",(0,a.kt)("strong",{parentName:"li"},"t"),"op) corner of (the bounding box of) the ",(0,a.kt)("inlineCode",{parentName:"li"},"ImageNode"),".")),(0,a.kt)(l.Z,{url:"https://user-images.githubusercontent.com/15677328/231755350-0e805ea4-2977-43ce-9332-6e0cb5528f93.mp4",mdxType:"Video"}),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"dict(\n    nodeConstraint=NodeConstraints.NONE,\n    follow=False,\n    pivot=PivotType.RT,\n)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The plugin will always be displayed."),(0,a.kt)("li",{parentName:"ul"},"The plugin will be placed at the ",(0,a.kt)("inlineCode",{parentName:"li"},"rt")," (",(0,a.kt)("strong",{parentName:"li"},"r"),"ight ",(0,a.kt)("strong",{parentName:"li"},"t"),"op) corner of the entire drawboard \ud83c\udfa8.")),(0,a.kt)(l.Z,{url:"https://user-images.githubusercontent.com/15677328/231756113-8f812860-c7af-44da-9afd-17b5f469f7f6.mp4",mdxType:"Video"}),(0,a.kt)("hr",null),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"dict(\n    nodeConstraintRules=NodeConstraintRules(\n        exactly=[NodeConstraints.IMAGE, NodeConstraints.PATH]\n    )\n    follow=True,\n    pivot=PivotType.RT,\n)\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The plugin will be displayed if and only if (exactly) an ",(0,a.kt)("inlineCode",{parentName:"li"},"ImageNode")," & a ",(0,a.kt)("inlineCode",{parentName:"li"},"PathNode")," are selected."),(0,a.kt)("li",{parentName:"ul"},"The plugin will follow the ",(0,a.kt)("inlineCode",{parentName:"li"},"rt")," (",(0,a.kt)("strong",{parentName:"li"},"r"),"ight ",(0,a.kt)("strong",{parentName:"li"},"t"),"op) corner of (the bounding box of) the selected ",(0,a.kt)("inlineCode",{parentName:"li"},"Node"),"s.")),(0,a.kt)(l.Z,{url:"https://user-images.githubusercontent.com/15677328/235454904-65a383e8-ef7c-46f8-9e94-fb576b762222.mp4",mdxType:"Video"}),(0,a.kt)("hr",null))}m.isMDXComponent=!0}}]);