"use strict";(self.webpackChunkcarefree_drawboard_doc=self.webpackChunkcarefree_drawboard_doc||[]).push([[7730],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6873:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294);function r(e){let{type:t,defaultValue:n,required:r,appendix:i}=e;const l=a.createElement(a.Fragment,null,i&&a.createElement(a.Fragment,null," ","- ",a.createElement("code",null,i)));return a.createElement("p",null,"[ ",a.createElement("strong",null,t),r?a.createElement(a.Fragment,null,a.createElement("em",null,", required"),l):n?a.createElement(a.Fragment,null,a.createElement("em",null,", default"),": ",a.createElement("code",null,n),l):""," ","]")}},4372:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var a=n(7462),r=n(7294),i=n(3905),l=n(6873);const o={id:"Built-in-Methods",title:"Built-in Methods"},s=void 0,d={unversionedId:"api-reference/Built-in-Methods",id:"api-reference/Built-in-Methods",title:"Built-in Methods",description:"Methods in this page can be accessed by any plugin in carefree-drawboard \ud83c\udfa8.",source:"@site/docs/api-reference/Built-in-Methods.md",sourceDirName:"api-reference",slug:"/api-reference/Built-in-Methods",permalink:"/carefree-drawboard-doc/docs/api-reference/Built-in-Methods",draft:!1,tags:[],version:"current",lastUpdatedAt:1688991441,formattedLastUpdatedAt:"Jul 10, 2023",frontMatter:{id:"Built-in-Methods",title:"Built-in Methods"},sidebar:"docs",previous:{title:"Global Functions",permalink:"/carefree-drawboard-doc/docs/api-reference/Global-Functions"},next:{title:"IPluginSettings",permalink:"/carefree-drawboard-doc/docs/api-reference/IPluginSettings"}},p={},c=[{value:"<code>filter</code>",id:"filter",level:3},{value:"<code>nodes</code>",id:"nodes",level:4},{value:"<code>target</code>",id:"target",level:4},{value:"Returns",id:"returns",level:4},{value:"Example",id:"example",level:4},{value:"<code>load_image</code>",id:"load_image",level:3},{value:"<code>src</code>",id:"src",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Example",id:"example-1",level:4},{value:"<code>send_progress</code>",id:"send_progress",level:3},{value:"Examples",id:"examples",level:4},{value:"<code>send_exception</code>",id:"send_exception",level:3},{value:"<code>message</code>",id:"message",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<code>set_extra_response</code>",id:"set_extra_response",level:3},{value:"<code>key</code>",id:"key",level:4},{value:"<code>value</code>",id:"value",level:4},{value:"<code>set_injection</code>",id:"set_injection",level:3},{value:"<code>key</code>",id:"key-1",level:4},{value:"<code>node</code>",id:"node",level:4}],u={toc:c},m="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Methods in this page can be accessed by any plugin in ",(0,i.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8.")),(0,i.kt)("h3",{id:"filter"},(0,i.kt)("inlineCode",{parentName:"h3"},"filter")),(0,i.kt)("p",null,"This method can help you pick up the nodes of the specified type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def filter(self, nodes: List[INodeData], target: SingleNodeType) -> List[INodeData]:\n    return list(filter(lambda node: node.type == target, nodes))\n")),(0,i.kt)("h4",{id:"nodes"},(0,i.kt)("inlineCode",{parentName:"h4"},"nodes")),(0,i.kt)(l.Z,{type:(0,i.kt)(r.Fragment,null,"List[",(0,i.kt)("a",{href:"/carefree-drawboard-doc/docs/api-reference/ISocketRequest#inodedata"},"INodeData"),"]"),required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The list of ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/ISocketRequest#inodedata"},(0,i.kt)("inlineCode",{parentName:"a"},"INodeData"))," objects to be filtered."),(0,i.kt)("h4",{id:"target"},(0,i.kt)("inlineCode",{parentName:"h4"},"target")),(0,i.kt)(l.Z,{type:(0,i.kt)("a",{href:"/carefree-drawboard-doc/docs/api-reference/Types#singlenodetype"},"SingleNodeType"),required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The type of nodes to be picked up."),(0,i.kt)("h4",{id:"returns"},"Returns"),(0,i.kt)(l.Z,{type:(0,i.kt)(r.Fragment,null,"List[",(0,i.kt)("a",{href:"/carefree-drawboard-doc/docs/api-reference/ISocketRequest#inodedata"},"INodeData"),"]"),mdxType:"Badget"}),(0,i.kt)("p",null,"The filtered list of ",(0,i.kt)("a",{parentName:"p",href:"/docs/api-reference/ISocketRequest#inodedata"},(0,i.kt)("inlineCode",{parentName:"a"},"INodeData"))," objects."),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        ...\n\n    async def process(self, data: ISocketRequest):\n        # highlight-start\n        path_data = self.filter(data.nodeDataList, SingleNodeType.PATH)[0]\n        image_data = self.filter(data.nodeDataList, SingleNodeType.IMAGE)[0]\n        # highlight-end\n        ...\n")),(0,i.kt)("h3",{id:"load_image"},(0,i.kt)("inlineCode",{parentName:"h3"},"load_image")),(0,i.kt)("p",null,"This method will help you download the image from the given url and return a ",(0,i.kt)("inlineCode",{parentName:"p"},"PIL.Image")," object. It is ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," so you don't have to worry about blocking the main thread."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"async def load_image(self, src: str) -> Image.Image:\n    ...\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Don't forget to ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," this method!")),(0,i.kt)("h4",{id:"src"},(0,i.kt)("inlineCode",{parentName:"h4"},"src")),(0,i.kt)(l.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The url of the image to be downloaded."),(0,i.kt)("h4",{id:"returns-1"},"Returns"),(0,i.kt)(l.Z,{type:"Image",mdxType:"Badget"}),(0,i.kt)("p",null,"The downloaded ",(0,i.kt)("inlineCode",{parentName:"p"},"PIL.Image")," object."),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        ...\n\n    async def process(self, data: ISocketRequest):\n        # highlight-start\n        url = data.nodeData.src\n        image = await self.load_image(url)\n        # highlight-end\n        ...\n")),(0,i.kt)("h3",{id:"send_progress"},(0,i.kt)("inlineCode",{parentName:"h3"},"send_progress")),(0,i.kt)("p",null,"This method can be used to send the intermediate progress to the frontend."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This method is useful only if the corresponding plugin binding can handle the intermediate progress data. Currently, only the following situations are supported:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"You can send ",(0,i.kt)("inlineCode",{parentName:"li"},"progress")," to ",(0,i.kt)("a",{parentName:"li",href:"/docs/plugins/IFieldsPlugin"},"IFieldsPlugin"),", so the progress bar will be updated."),(0,i.kt)("li",{parentName:"ul"},"You can send ",(0,i.kt)("inlineCode",{parentName:"li"},"textList")," to ",(0,i.kt)("a",{parentName:"li",href:"/docs/plugins/IChatPlugin"},"IChatPlugin"),", so the chat will be updated."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def send_progress(\n    self,\n    progress: Optional[float] = None,\n    *,\n    textList: Optional[List[str]] = None,\n    imageList: Optional[List[str]] = None,\n# highlight-next-line\n) -> bool:\n    ...\n")),(0,i.kt)("p",null,"As the highlighted line shows, this method returns ",(0,i.kt)("inlineCode",{parentName:"p"},"bool"),", which indicates whether the progress is successfully sent."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," is returned, it usually means that you should cancel the operation.")),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/plugins/IFieldsPlugin"},(0,i.kt)("inlineCode",{parentName:"a"},"IFieldsPlugin")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        ...\n\n    async def process(self, data: ISocketRequest):\n        # highlight-start\n        total = 20\n        for j in range(total):\n            # if `send_progress` does not execute successfully, break the loop\n            if not self.send_progress((j + 1) / total):\n                break\n            time.sleep(0.25)\n        # highlight-end\n        ...\n")),(0,i.kt)("p",null,"This example will update the progress bar every 0.25 seconds."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/plugins/IChatPlugin"},(0,i.kt)("inlineCode",{parentName:"a"},"IChatPlugin")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        ...\n\n    async def process(self, data: ISocketRequest):\n        ...\n        text = lorem.words(20)\n        for char in text:\n            new_context += char\n            # highlight-next-line\n            self.send_progress(textList=[new_context])\n            time.sleep(0.025)\n        return new_context\n")),(0,i.kt)("h3",{id:"send_exception"},(0,i.kt)("inlineCode",{parentName:"h3"},"send_exception")),(0,i.kt)("p",null,"This method can be used to send an exception message to the frontend."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def send_exception(self, message: str) -> bool:\n    ...\n")),(0,i.kt)("h4",{id:"message"},(0,i.kt)("inlineCode",{parentName:"h4"},"message")),(0,i.kt)(l.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The exception message to be sent."),(0,i.kt)("h4",{id:"returns-2"},"Returns"),(0,i.kt)(l.Z,{type:"bool",mdxType:"Badget"}),(0,i.kt)("p",null,"Whether the exception message is successfully sent."),(0,i.kt)("h3",{id:"set_extra_response"},(0,i.kt)("inlineCode",{parentName:"h3"},"set_extra_response")),(0,i.kt)("p",null,"This method can be used to set an extra response key-value pair."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This method will be useful when you want to record some extra data to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/user-guides/features#meta"},"meta")," of the new ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/terminology#node"},"Node"),".")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def set_extra_response(self, key: str, value: Any) -> None:\n    ...\n")),(0,i.kt)("h4",{id:"key"},(0,i.kt)("inlineCode",{parentName:"h4"},"key")),(0,i.kt)(l.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The key of the extra response."),(0,i.kt)("h4",{id:"value"},(0,i.kt)("inlineCode",{parentName:"h4"},"value")),(0,i.kt)(l.Z,{type:"Any",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The value of the extra response, should be JSON serializable."),(0,i.kt)("h3",{id:"set_injection"},(0,i.kt)("inlineCode",{parentName:"h3"},"set_injection")),(0,i.kt)("p",null,"This method can be used to set an extra injection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def set_injection(self, key: str, node: INodeData) -> None:\n    ...\n")),(0,i.kt)("h4",{id:"key-1"},(0,i.kt)("inlineCode",{parentName:"h4"},"key")),(0,i.kt)(l.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The key of the injection."),(0,i.kt)("h4",{id:"node"},(0,i.kt)("inlineCode",{parentName:"h4"},"node")),(0,i.kt)(l.Z,{type:(0,i.kt)("a",{href:"/carefree-drawboard-doc/docs/api-reference/ISocketRequest#inodedata"},"INodeData"),required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The node of the injection."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/terminology#injections"},"Injections")," for what an 'injection' is.")))}g.isMDXComponent=!0}}]);