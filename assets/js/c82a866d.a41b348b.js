"use strict";(self.webpackChunkcarefree_drawboard_doc=self.webpackChunkcarefree_drawboard_doc||[]).push([[1168],{7375:(e,n,t)=>{t.d(n,{Z:()=>r});var i=t(7294),l=t(2004);function r(e){let{url:n}=e;return i.createElement(i.Fragment,null,i.createElement("div",{align:"center"},i.createElement(l.Z,{playing:!0,controls:!0,url:n})),i.createElement("br",null))}},1525:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var i=t(7462),l=(t(7294),t(3905)),r=t(7375);const a={id:"IPluginGroup",title:"IPluginGroup"},o=void 0,u={unversionedId:"plugins/IPluginGroup",id:"plugins/IPluginGroup",title:"IPluginGroup",description:"* IPluginInfo",source:"@site/docs/plugins/IPluginGroup.md",sourceDirName:"plugins",slug:"/plugins/IPluginGroup",permalink:"/carefree-drawboard-doc/docs/plugins/IPluginGroup",draft:!1,tags:[],version:"current",lastUpdatedAt:1688021515,formattedLastUpdatedAt:"Jun 29, 2023",frontMatter:{id:"IPluginGroup",title:"IPluginGroup"},sidebar:"docs",previous:{title:"IChatPlugin",permalink:"/carefree-drawboard-doc/docs/plugins/IChatPlugin"},next:{title:"CLI",permalink:"/carefree-drawboard-doc/docs/user-guides/cli"}},p={},s=[{value:"Define Plugin",id:"define-plugin",level:2},{value:"Define Plugin Group",id:"define-plugin-group",level:2},{value:"Run",id:"run",level:2}],g={toc:s},d="wrapper";function c(e){let{components:n,...t}=e;return(0,l.kt)(d,(0,i.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{title:"API reference",type:"info"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginInfo"},"IPluginInfo"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/api-reference/IPluginGroupInfo"},"IPluginGroupInfo")))))),(0,l.kt)("p",null,"Sometimes we want to group plugins together. For instance, we may want to group the plugins that are related to the same API, or we may want to group the plugins that are related to the same category."),(0,l.kt)("p",null,"Grouping plugins can be achieved by using the ",(0,l.kt)("inlineCode",{parentName:"p"},"IPluginGroup")," binding. We've provided a ",(0,l.kt)("inlineCode",{parentName:"p"},"test_plugin_grouop.py")," file in the ",(0,l.kt)("inlineCode",{parentName:"p"},"tests")," folder, and here we will break it down for you to understand how ",(0,l.kt)("inlineCode",{parentName:"p"},"IPluginGroup")," works."),(0,l.kt)("p",null,"Here's the complete code:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'showLineNumbers title="tests/test_plugin_group.py"',showLineNumbers:!0,title:'"tests/test_plugin_group.py"'},'from cfdraw import *\n\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(\n            w=260,\n            h=180,\n            pluginInfo=IFieldsPluginInfo(\n                definitions=dict(foo=ITextField(default="tExT", tooltip="bar"))\n            ),\n        )\n\n    async def process(self, data: ISocketRequest) -> str:\n        return data.extraData["foo"]\n\n\nclass PluginGroup(IPluginGroup):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(\n            w=200,\n            h=110,\n            pivot=PivotType.RIGHT,\n            pluginInfo=IPluginGroupInfo(plugins=dict(bar=Plugin)),\n        )\n\n\nregister_plugin("plugins")(PluginGroup)\napp = App()\n')),(0,l.kt)("h2",{id:"define-plugin"},"Define Plugin"),(0,l.kt)("p",null,"In order to use ",(0,l.kt)("inlineCode",{parentName:"p"},"IPluginGroup"),", we need to define a plugin first. In this example, we utilize the ",(0,l.kt)("a",{parentName:"p",href:"/docs/plugins/IFieldsPlugin"},(0,l.kt)("inlineCode",{parentName:"a"},"IFieldsPlugin"))," binding to define the ",(0,l.kt)("inlineCode",{parentName:"p"},"Plugin"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="tests/test_plugin_group.py"',title:'"tests/test_plugin_group.py"'},'from cfdraw import *\n\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(\n            w=260,\n            h=180,\n            pluginInfo=IFieldsPluginInfo(\n                definitions=dict(foo=ITextField(default="tExT", tooltip="bar"))\n            ),\n        )\n\n    async def process(self, data: ISocketRequest) -> str:\n        return data.extraData["foo"]\n')),(0,l.kt)("p",null,"This plugin is a simple plugin that will always return the user-given ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," field."),(0,l.kt)("h2",{id:"define-plugin-group"},"Define Plugin Group"),(0,l.kt)("p",null,"Since everything in ",(0,l.kt)("inlineCode",{parentName:"p"},"carefree-drawboard")," \ud83c\udfa8 is a plugin, ",(0,l.kt)("inlineCode",{parentName:"p"},"IPluginGroup")," itself is also a plugin. And it is even easier to define an ",(0,l.kt)("inlineCode",{parentName:"p"},"IPluginGroup")," because it does not contain any ",(0,l.kt)("strong",{parentName:"p"},"Logics"),", and we only need to specify the ",(0,l.kt)("strong",{parentName:"p"},"Styles"),". So putting plugins inside a group is pretty straightforward - just specify the corresponding ",(0,l.kt)("strong",{parentName:"p"},"Styles")," and it will be all set."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="tests/test_plugin_group.py"',title:'"tests/test_plugin_group.py"'},'class PluginGroup(IPluginGroup):\n    @property\n    def settings(self) -> IPluginSettings:\n        return IPluginSettings(\n            w=200,\n            h=110,\n            pivot=PivotType.LEFT,\n            tooltip="A plugin group",\n            # highlight-next-line\n            pluginInfo=IPluginGroupInfo(plugins=dict(bar=Plugin)),\n        )\n')),(0,l.kt)("p",null,"Here, we specify the ",(0,l.kt)("inlineCode",{parentName:"p"},"Plugin")," as the only plugin inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"PluginGroup"),", with the key ",(0,l.kt)("inlineCode",{parentName:"p"},"bar"),"."),(0,l.kt)("admonition",{type:"tip"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},"The key should be ",(0,l.kt)("strong",{parentName:"li"},"unique")," universally, and it is recommended to use a self-explanatory name."),(0,l.kt)("li",{parentName:"ul"},"The value of the ",(0,l.kt)("inlineCode",{parentName:"li"},"plugins")," property should be the ",(0,l.kt)("strong",{parentName:"li"},"class")," of the plugin, not the instance."))),(0,l.kt)("h2",{id:"run"},"Run"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="tests"',title:'"tests"'},"cfdraw run --module test_plugin_group.py\n")),(0,l.kt)("p",null,"And here's a demo video of how this plugin / plugin group works:"),(0,l.kt)(r.Z,{url:"https://github.com/carefree0910/carefree-drawboard/assets/15677328/9ce82f8b-0fb9-4da8-9519-52b8b6e77a30",mdxType:"Video"}))}c.isMDXComponent=!0}}]);