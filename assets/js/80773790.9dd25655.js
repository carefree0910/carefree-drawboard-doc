"use strict";(self.webpackChunkcarefree_drawboard_doc=self.webpackChunkcarefree_drawboard_doc||[]).push([[7294],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(d,".").concat(m)]||u[m]||s[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6873:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294);function r(e){let{type:t,defaultValue:n,required:r,appendix:i}=e;const o=a.createElement(a.Fragment,null,i&&a.createElement(a.Fragment,null," ","- ",a.createElement("code",null,i)));return a.createElement("p",null,"[ ",a.createElement("strong",null,t),","," ",r?a.createElement(a.Fragment,null,a.createElement("em",null,"required"),o):a.createElement(a.Fragment,null,a.createElement("em",null,"default"),": ",a.createElement("code",null,n),o)," ","]")}},8377:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(7462),r=n(7294),i=n(3905),o=n(6873);const l={id:"ISocketRequest",title:"ISocketRequest"},d=void 0,p={unversionedId:"api-reference/ISocketRequest",id:"api-reference/ISocketRequest",title:"ISocketRequest",description:"hash",source:"@site/docs/api-reference/ISocketRequest.md",sourceDirName:"api-reference",slug:"/api-reference/ISocketRequest",permalink:"/carefree-drawboard-doc/docs/api-reference/ISocketRequest",draft:!1,tags:[],version:"current",lastUpdatedAt:1686029842,formattedLastUpdatedAt:"Jun 6, 2023",frontMatter:{id:"ISocketRequest",title:"ISocketRequest"},sidebar:"docs",previous:{title:"IPluginInfo",permalink:"/carefree-drawboard-doc/docs/api-reference/IPluginInfo"},next:{title:"ISocketMessage",permalink:"/carefree-drawboard-doc/docs/api-reference/ISocketMessage"}},c={},u=[{value:"<code>hash</code>",id:"hash",level:3},{value:"<code>userId</code>",id:"userid",level:3},{value:"<code>userJson</code>",id:"userjson",level:3},{value:"<code>baseURL</code>",id:"baseurl",level:3},{value:"<code>identifier</code>",id:"identifier",level:3},{value:"<code>nodeData</code>",id:"nodedata",level:3},{value:"<code>nodeDataList</code>",id:"nodedatalist",level:3},{value:"<code>extraData</code>",id:"extradata",level:3},{value:"<code>isInternal</code>",id:"isinternal",level:3},{value:"Reference",id:"reference",level:2},{value:"<code>INodeData</code>",id:"inodedata",level:3}],s={toc:u},m="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"hash"},(0,i.kt)("inlineCode",{parentName:"h3"},"hash")),(0,i.kt)(o.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The hash of the request."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This is used internally and should not be used elsewhere.")),(0,i.kt)("h3",{id:"userid"},(0,i.kt)("inlineCode",{parentName:"h3"},"userId")),(0,i.kt)(o.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The id of the user."),(0,i.kt)("h3",{id:"userjson"},(0,i.kt)("inlineCode",{parentName:"h3"},"userJson")),(0,i.kt)(o.Z,{type:"str | None",defaultValue:"None",mdxType:"Badget"}),(0,i.kt)("p",null,"Full json of the user info."),(0,i.kt)("h3",{id:"baseurl"},(0,i.kt)("inlineCode",{parentName:"h3"},"baseURL")),(0,i.kt)(o.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The base url of the request."),(0,i.kt)("h3",{id:"identifier"},(0,i.kt)("inlineCode",{parentName:"h3"},"identifier")),(0,i.kt)(o.Z,{type:"str",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"The identifier of the plugin."),(0,i.kt)("h3",{id:"nodedata"},(0,i.kt)("inlineCode",{parentName:"h3"},"nodeData")),(0,i.kt)(o.Z,{type:(0,i.kt)("a",{href:"#inodedata"},"INodeData"),required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"Data extracted from the selecting ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/terminology#node"},(0,i.kt)("inlineCode",{parentName:"a"},"Node")),"."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If multiple nodes are selected, this field will be empty and please use ",(0,i.kt)("a",{parentName:"p",href:"#nodedatalist"},"nodeDataList")," instead.")),(0,i.kt)("h3",{id:"nodedatalist"},(0,i.kt)("inlineCode",{parentName:"h3"},"nodeDataList")),(0,i.kt)(o.Z,{type:(0,i.kt)(r.Fragment,null,"List[",(0,i.kt)("a",{href:"#inodedata"},"INodeData"),"]"),required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"List of data extracted from the selecting ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/terminology#node"},(0,i.kt)("inlineCode",{parentName:"a"},"Node")),"s."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"If only one node is selected, this field will be empty and please use ",(0,i.kt)("a",{parentName:"p",href:"#nodedata"},"nodeData")," instead.")),(0,i.kt)("h3",{id:"extradata"},(0,i.kt)("inlineCode",{parentName:"h3"},"extraData")),(0,i.kt)(o.Z,{type:"Dict[str, Any]",required:!0,mdxType:"Badget"}),(0,i.kt)("p",null,"Extra data of each plugin."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Notice that different plugin bindings will have different format of ",(0,i.kt)("inlineCode",{parentName:"p"},"extraData"),".")),(0,i.kt)("h3",{id:"isinternal"},(0,i.kt)("inlineCode",{parentName:"h3"},"isInternal")),(0,i.kt)(o.Z,{type:"bool",defaultValue:"False",mdxType:"Badget"}),(0,i.kt)("p",null,"Whether the request is internal."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"This is used internally and should not be used elsewhere.")),(0,i.kt)("h2",{id:"reference"},"Reference"),(0,i.kt)("h3",{id:"inodedata"},(0,i.kt)("inlineCode",{parentName:"h3"},"INodeData")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"type")," : The type of the node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"x")," : The X coordinate of the node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"y")," : The Y coordinate of the node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"w")," : The width of the node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"h")," : The height of the node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"transform")," : The transform matrix of the node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"text")," : The content of the node, will be ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," if the node is not a ",(0,i.kt)("inlineCode",{parentName:"li"},"TextNode"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"src")," : The image url of the node, will be ",(0,i.kt)("inlineCode",{parentName:"li"},"None")," if the node is not intended to be converted to an image.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Currently only ",(0,i.kt)("inlineCode",{parentName:"li"},"ImageNode"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"SVGNode")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"PathNode")," will have this field defined."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"meta")," : The meta of the node, it will differ from node to node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"children")," : The children of the node, it will be a list of ",(0,i.kt)("inlineCode",{parentName:"li"},"INodeData")," if and only if the node is a ",(0,i.kt)("inlineCode",{parentName:"li"},"Group")," (i.e., ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," == 'group' or ",(0,i.kt)("inlineCode",{parentName:"li"},"type")," == 'frame').")))}f.isMDXComponent=!0}}]);