"use strict";(self.webpackChunkcarefree_drawboard_doc=self.webpackChunkcarefree_drawboard_doc||[]).push([[7730],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(n),g=i,m=c["".concat(s,".").concat(g)]||c[g]||u[g]||r;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},4372:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={id:"Built-in-Methods",title:"Built-in Methods"},l=void 0,o={unversionedId:"api-reference/Built-in-Methods",id:"api-reference/Built-in-Methods",title:"Built-in Methods",description:"filter",source:"@site/docs/api-reference/Built-in-Methods.md",sourceDirName:"api-reference",slug:"/api-reference/Built-in-Methods",permalink:"/carefree-drawboard-doc/docs/api-reference/Built-in-Methods",draft:!1,tags:[],version:"current",lastUpdatedAt:1685961752,formattedLastUpdatedAt:"Jun 5, 2023",frontMatter:{id:"Built-in-Methods",title:"Built-in Methods"},sidebar:"docs",previous:{title:"Config",permalink:"/carefree-drawboard-doc/docs/api-reference/Config"},next:{title:"IPluginSettings",permalink:"/carefree-drawboard-doc/docs/api-reference/IPluginSettings"}},s={},p=[{value:"<code>filter</code>",id:"filter",level:3},{value:"Example",id:"example",level:4},{value:"<code>load_image</code>",id:"load_image",level:3},{value:"Example",id:"example-1",level:4},{value:"<code>send_progress</code>",id:"send_progress",level:3},{value:"Examples",id:"examples",level:4},{value:"<code>IFieldsPlugin</code>",id:"ifieldsplugin",level:5},{value:"<code>IChatPlugin</code>",id:"ichatplugin",level:5},{value:"<code>send_exception</code>",id:"send_exception",level:3},{value:"<code>set_extra_response</code>",id:"set_extra_response",level:3},{value:"<code>set_injection</code>",id:"set_injection",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"filter"},(0,i.kt)("inlineCode",{parentName:"h3"},"filter")),(0,i.kt)("p",null,"This method can help you pick up the nodes of the specified type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def filter(self, nodes: List[INodeData], target: SingleNodeType) -> List[INodeData]:\n    return list(filter(lambda node: node.type == target, nodes))\n")),(0,i.kt)("h4",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        ...\n\n    async def process(self, data: ISocketRequest):\n        # highlight-start\n        path_data = self.filter(data.nodeDataList, SingleNodeType.PATH)[0]\n        image_data = self.filter(data.nodeDataList, SingleNodeType.IMAGE)[0]\n        # highlight-end\n        ...\n")),(0,i.kt)("h3",{id:"load_image"},(0,i.kt)("inlineCode",{parentName:"h3"},"load_image")),(0,i.kt)("p",null,"This method will help you download the image from the given url and return a ",(0,i.kt)("inlineCode",{parentName:"p"},"PIL.Image")," object. It is ",(0,i.kt)("inlineCode",{parentName:"p"},"async")," so you don't have to worry about blocking the main thread."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"async def load_image(self, src: str) -> Image.Image:\n    ...\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Don't forget to ",(0,i.kt)("inlineCode",{parentName:"p"},"await")," this method!")),(0,i.kt)("h4",{id:"example-1"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        ...\n\n    async def process(self, data: ISocketRequest):\n        # highlight-start\n        url = data.nodeData.src\n        image = await self.load_image(url)\n        # highlight-end\n        ...\n")),(0,i.kt)("h3",{id:"send_progress"},(0,i.kt)("inlineCode",{parentName:"h3"},"send_progress")),(0,i.kt)("p",null,"This method can be used to send the intermediate progress to the frontend."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def send_progress(\n    self,\n    progress: Optional[float] = None,\n    *,\n    textList: Optional[List[str]] = None,\n    imageList: Optional[List[str]] = None,\n# highlight-next-line\n) -> bool:\n    ...\n")),(0,i.kt)("p",null,"As the highlighted line shows, this method returns ",(0,i.kt)("inlineCode",{parentName:"p"},"bool"),", which indicates whether the progress is successfully sent."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"If ",(0,i.kt)("inlineCode",{parentName:"p"},"False")," is returned, it usually means that you should cancel the operation.")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"This method is useful only if the corresponding plugin binding can handle the intermediate progress data. Currently, only the following situations are supported:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"You can send ",(0,i.kt)("inlineCode",{parentName:"li"},"progress")," to ",(0,i.kt)("a",{parentName:"li",href:"/docs/plugins/IFieldsPlugin"},"IFieldsPlugin"),", so the progress bar will be updated."),(0,i.kt)("li",{parentName:"ul"},"You can send ",(0,i.kt)("inlineCode",{parentName:"li"},"textList")," to ",(0,i.kt)("a",{parentName:"li",href:"/docs/plugins/IChatPlugin"},"IChatPlugin"),", so the chat will be updated."))),(0,i.kt)("h4",{id:"examples"},"Examples"),(0,i.kt)("h5",{id:"ifieldsplugin"},(0,i.kt)("a",{parentName:"h5",href:"/docs/plugins/IFieldsPlugin"},(0,i.kt)("inlineCode",{parentName:"a"},"IFieldsPlugin"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        ...\n\n    async def process(self, data: ISocketRequest):\n        # highlight-start\n        total = 20\n        for j in range(total):\n            # if `send_progress` does not execute successfully, break the loop\n            if not self.send_progress((j + 1) / total):\n                break\n            time.sleep(0.25)\n        # highlight-end\n        ...\n")),(0,i.kt)("p",null,"This example will update the progress bar every 0.25 seconds."),(0,i.kt)("h5",{id:"ichatplugin"},(0,i.kt)("a",{parentName:"h5",href:"/docs/plugins/IChatPlugin"},(0,i.kt)("inlineCode",{parentName:"a"},"IChatPlugin"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="app.py"',title:'"app.py"'},"from cfdraw import *\n\nclass Plugin(IFieldsPlugin):\n    @property\n    def settings(self) -> IPluginSettings:\n        ...\n\n    async def process(self, data: ISocketRequest):\n        ...\n        text = lorem.words(20)\n        for char in text:\n            new_context += char\n            # highlight-next-line\n            self.send_progress(textList=[new_context])\n            time.sleep(0.025)\n        return new_context\n")),(0,i.kt)("h3",{id:"send_exception"},(0,i.kt)("inlineCode",{parentName:"h3"},"send_exception")),(0,i.kt)("p",null,"This method can be used to send an exception message to the frontend."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def send_exception(self, message: str) -> bool:\n    ...\n")),(0,i.kt)("h3",{id:"set_extra_response"},(0,i.kt)("inlineCode",{parentName:"h3"},"set_extra_response")),(0,i.kt)("p",null,"This method can be used to set an extra response key-value pair."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def set_extra_response(self, key: str, value: Any) -> None:\n    ...\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"value")," should be JSON serializable."),(0,i.kt)("li",{parentName:"ul"},"This method will be useful when you want to record some extra data to the ",(0,i.kt)("a",{parentName:"li",href:"/docs/user-guides/features#meta"},"meta")," of the new ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/terminology#node"},"Node"),"."))),(0,i.kt)("h3",{id:"set_injection"},(0,i.kt)("inlineCode",{parentName:"h3"},"set_injection")),(0,i.kt)("p",null,"This method can be used to set an extra injection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="cfdraw/plugins/base.py"',title:'"cfdraw/plugins/base.py"'},"def set_injection(self, key: str, node: INodeData) -> None:\n    ...\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"See ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/terminology#injections"},"Injections")," for what an 'injection' is.")))}u.isMDXComponent=!0}}]);